/*
{{originalFile}}
Generated by UnityTwine on {{timestamp}}
https://github.com/daterre/UnityTwine
*/

using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityTwine;

public class {{storyName}}: TwineStory
{
	{{#vars}}
	public TwineVar {{.}};
	{{/vars}}

	string[] _varNames = new string[] {
	{{#vars}}
		"{{.}}",
	{{/vars}}
	};

	public override string[] VarNames
	{
		get { return _varNames; }
	}

	public override TwineVar this[string name]
	{
		get
		{
			switch(name)
			{
				{{#vars}}
				case "{{.}}": return {{.}};
				{{/vars}}
				default: throw new KeyNotFoundException(string.Format("There is no variable with the name '{0}'.", name));
			}
		}
		set
		{
			switch(name)
			{
				{{#vars}}
				case "{{.}}": {{.}} = value; break;
				{{/vars}}
				default: throw new KeyNotFoundException(string.Format("There is no variable with the name '{0}'.", name));
			}
		}
	}
	
	void Awake() {
		base.Init();
		{{#passages}}
		passageInit_{{ID}}();
		{{/passages}}
	}

	{{#passages}}
	// .............
	// #{{ID}}: {{Name}}

	void passageInit_{{ID}}()
	{
		this.Passages["{{Name}}"] = new TwinePassage("{{Name}}", new string[]{ {{& Tags}} }, passageExecute_{{ID}});
	}

	IEnumerable<TwineOutput> passageExecute_{{ID}}()
	{
		{{#Code}}
		{{& .}}
		{{/Code}}
	}

	{{/passages}}
}